#_AIRFLOW_WWW_USER_USERNAME="airflow"

#_AIRFLOW_WWW_USER_PASSWORD="airflow"

x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE_DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ${AIRFLOW_HOME:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_HOME:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_HOME:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_HOME:-.}/webserver_config.py:/opt/airflow/webserver_config.py
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    airflow-postgres:
      condition: service_healthy
    airflow-redis:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data # Volume to persist database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always 


  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080" # Maps the container's port 8080 to the host's port 8080
    environment:
      - RATELIMIT_STORAGE_URI=redis://airflow-redis:6379/0
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test: 
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"  
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully  


  airflow-init:
    build:
      context: .
    container_name: airflow-init
    command: >
      bash -c "
      while ! pg_isready -h airflow-postgres -U airflow; do
        echo 'Waiting for Postgres...';
        sleep 5;
      done;
      airflow db migrate &&
      airflow connections create-default-connections &&
      airflow users create \
      --username admin \
      --password admin \
      --firstname Admin \ 
      --lastname User \
      --role Admin \
      --email admin@example.com"
    environment:
      - RATELIMIT_STORAGE_URI=redis://airflow-redis:6379/0
    restart: "no"

volumes:
  postgres-db-volume: {} # Defines the volume for PostgreSQL data