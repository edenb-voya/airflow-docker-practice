services:
  airflow-init:
    build:
      context: .
    container_name: airflow-init
    command: >
      bash -c "
      while ! pg_isready -h airflow-postgres -U airflow; do
        echo 'Waiting for Postgres...';
        sleep 5;
      done;
      airflow db migrate &&
      airflow connections create-default-connections &&
      airflow users create \
      --username admin \
      --password admin \
      --firstname Admin \ 
      --lastname User \
      --role Admin \
      --email admin@example.com"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      - AIRFLOW__WEBSERVER__RATE_LIMITER=redis://airflow-redis:6379/0
    depends_on:
      airflow-postgres:
        condition: service_healthy
      # - airflow-redis
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    restart: "no"

  airflow-webserver:
    build:
      context: .
    container_name: airflow-webserver
    command: ["airflow", "webserver"]
    ports:
      - "8080:8080" # Maps the container's port 8080 to the host's port 8080
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-postgres:5432/airflow
      - AIRFLOW__WEBSERVER__RATE_LIMITER=redis://airflow-redis:6379/0
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      #- airflow-postgres
      #- airflow-redis
    volumes:
      - ./dags:/opt/airflow/dags # Mount local DAGs directory
      - ./logs:/opt/airflow/logs # Mount local logs directory
      - ./plugins:/opt/airflow/plugins # Mount local plugins directory
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3

  airflow-scheduler:
    build:
      context: .
    container_name: airflow-scheduler
    command: ["airflow", "scheduler"]
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-postgres:5432/airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      #- airflow-postgres
      #- airflow-redis    
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
  
  airflow-worker:
    build:
      context: .
    container_name: airflow-worker
    command: ["airflow", "celery", "worker"]
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://airflow-redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@airflow-postgres:5432/airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      #- airflow-postgres
      #- airflow-redis     
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3

  airflow-redis:
    image: redis:latest
    container_name: airflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data # Volume to persist Redis data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
    restart: always 

  airflow-postgres:
    image: postgres:14
    container_name: airflow-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume to persist database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

volumes:
  postgres_data: {} # Defines the volume for PostgreSQL data
  redis_data: {} # Defines the volume for Redis data